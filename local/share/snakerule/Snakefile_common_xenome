include: "conf.sk"

def defineXenome(wildcards):
    import glob
    import re
    import os
    fq = glob.glob(DATA+"/"+wildcards.sample+"X*fastq.gz")
    res = [ re.sub(r"_R\d.fastq.gz","", os.path.basename(x))+".xenome.placeholder" for x in fq]
    return res

rule all_xenome:
    input: defineXenome
    output: "{sample}.xen"
    shell:
        """
            touch {output}
        """

def produce_pairs(wildcards):
        import glob
        fastqs = glob.glob(DATA+"/"+wildcards.sample+"*.fastq.gz")
        #fastqs = expand(DATA+'/'+wildcards.sample+FASTQ_SUFFIX, pair=PAIRS)
        if len(fastqs) == 2 and os.path.isfile(fastqs[1]):
                return { 'fastq1': fastqs[0], 'fastq2': fastqs[1] }
        else:
                print("Error! I expect paired reads")
                return { 'fastq1': "placeholder", 'fastq2': "placeholder" }

#xenome classify -T 8 -P idx --pairs \ --graft-name human --host-name mouse \ --output-filename-prefix XYZ -i XYZ_1.fastq -i XYZ_2.fastq
#8 AMD Opteron cores running at 2 GHz and with 32 GB of RAM Xenome processes âˆ¼ 15 000 read pairs per sec
##[~]egrassi@hactarlogin$ zcat /work/egrassi/WXS/local/share/data/bardelli_wes/CRC0106LMX0B01201TUMD08000.xenome_graft_1.fastq.gz | wc -l
#260820876
#65205219
#4347
#73'

rule xenome:
    input: unpack(produce_pairs)
    #output: "{sample}.xenome.placeholder"
    params: cores=8, mem=20, xenome="/home/egrassi/common/task/sequences/dataset/gdc/xenomidx"
    log: "{sample}.xenome"
    singularity: ROOT+"/gossamer/gossamer.img"
    shell: 
        """
            xenome classify -v -T {params.cores} -M {params.mem} -P {params.xenome} --graft-name human --host-name mouse -l {log}\\
            --pairs --output-filename-prefix {wildcards.sample} -i {input.fastq1} -i {input.fastq2}
        """

rule checkxenome:
    input: unpack(produce_pairs)
    output: "{sample}.xenome.placeholder"
    shell:
       """
        tot1=$(zcat {input.fastq2} {input.fastq1} | wc -l)
        tot2=$(cat {wildcards.sample}_*.fastq | wc -l)
        if [ $tot1 = $tot2 ]; then
            echo -e "ok\t$tot1\t$tot2" > {output}
        else
            echo -e "error\t$tot1\t$tot2" > {output}
        fi
       """  


# todo rule to touch fastq files with the right age

rule add_chr_to_vcf_porc:
    input: DATA_DIR+"/All_20180418.vcf.gz"
    output: "dbsnp.all.vcf.gz"
    shell:
        """
        zcat {input} | perl -ane 'if (/^#/) {{print "$_"}} else {{print "chr$_"}}' | bgzip > {output}
        tabix -p vcf {output}
        """

rule sort_targeted_porc:
    input: bed=EXONS, fai=DATA_DIR+"/GRCh38.d1.vd1.fa.fai" 
    output: LSEXONS
    shell:
        """
            bedtools sort -faidx {input.fai} -i {input.bed} > {output}
        """
